name: CI Pipeline

on:
  push:
    branches:
      - feature-*

jobs:
  unit-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up Maven
        run: mvn -B dependency:resolve

      - name: Run unit tests
        run: mvn test

  integration-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Tune system settings
        run: |
          sudo sysctl -w vm.max_map_count=262144
          sudo sysctl -w vm.swappiness=1
          sudo sysctl -w net.core.somaxconn=4096

      - name: Start MongoDB
        run: |
          docker run -d --name mongodb \
            -p 27017:27017 \
            -e MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_ROOT_USERNAME }} \
            -e MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_ROOT_PASSWORD }} \
            -e GLIBC_TUNABLES=glibc.pthread.rseq=0 \
            --memory 4g \
            --cpus 2 \
            mongo:8.0.3

      - name: Wait for MongoDB to be ready
        run: |
          for i in {1..30}; do
            docker exec mongodb mongosh --eval "db.runCommand({ping:1})" && break
            sleep 2
          done

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up Maven
        run: mvn -B dependency:resolve

      - name: Run integration tests
        env:
          SPRING_PROFILES_ACTIVE: test
          MONGO_URI: mongodb://localhost:27017/testdb
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: mvn verify

      - name: Cleanup MongoDB
        if: always()
        run: docker rm -f mongodb

      - name: Upload test reports
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: target/surefire-reports
